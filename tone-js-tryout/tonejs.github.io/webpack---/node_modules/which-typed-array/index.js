/* WEBPACK VAR INJECTION */
(function(global) {

    var forEach = __webpack_require__( /*! foreach */ "./node_modules/foreach/index.js");
    var availableTypedArrays = __webpack_require__( /*! available-typed-arrays */ "./node_modules/available-typed-arrays/index.js");
    var callBound = __webpack_require__( /*! es-abstract/helpers/callBound */ "./node_modules/es-abstract/helpers/callBound.js");

    var $toString = callBound('Object.prototype.toString');
    var hasSymbols = __webpack_require__( /*! has-symbols */ "./node_modules/has-symbols/index.js")();
    var hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';

    var typedArrays = availableTypedArrays();

    var $slice = callBound('String.prototype.slice');
    var toStrTags = {};
    var gOPD = __webpack_require__( /*! es-abstract/helpers/getOwnPropertyDescriptor */ "./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js");
    var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
    if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function(typedArray) {
            if (typeof global[typedArray] === 'function') {
                var arr = new global[typedArray]();
                if (!(Symbol.toStringTag in arr)) {
                    throw new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');
                }
                var proto = getPrototypeOf(arr);
                var descriptor = gOPD(proto, Symbol.toStringTag);
                if (!descriptor) {
                    var superProto = getPrototypeOf(proto);
                    descriptor = gOPD(superProto, Symbol.toStringTag);
                }
                toStrTags[typedArray] = descriptor.get;
            }
        });
    }

    var tryTypedArrays = function tryAllTypedArrays(value) {
        var foundName = false;
        forEach(toStrTags, function(getter, typedArray) {
            if (!foundName) {
                try {
                    var name = getter.call(value);
                    if (name === typedArray) {
                        foundName = name;
                    }
                } catch (e) {}
            }
        });
        return foundName;
    };

    var isTypedArray = __webpack_require__( /*! is-typed-array */ "./node_modules/is-typed-array/index.js");

    module.exports = function whichTypedArray(value) {
        if (!isTypedArray(value)) {
            return false;
        }
        if (!hasToStringTag) {
            return $slice($toString(value), 8, -1);
        }
        return tryTypedArrays(value);
    };

    /* WEBPACK VAR INJECTION */
}.call(this, __webpack_require__( /*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))